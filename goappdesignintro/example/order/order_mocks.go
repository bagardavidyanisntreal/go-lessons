// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	"github.com/bagardavidyanisntreal/go-lessons/goappdesignintro/example/model/order"
	gomock "github.com/golang/mock/gomock"
)

// Mockorderer is a mock of orderer interface.
type Mockorderer struct {
	ctrl     *gomock.Controller
	recorder *MockordererMockRecorder
}

// MockordererMockRecorder is the mock recorder for Mockorderer.
type MockordererMockRecorder struct {
	mock *Mockorderer
}

// NewMockorderer creates a new mock instance.
func NewMockorderer(ctrl *gomock.Controller) *Mockorderer {
	mock := &Mockorderer{ctrl: ctrl}
	mock.recorder = &MockordererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockorderer) EXPECT() *MockordererMockRecorder {
	return m.recorder
}

// OrderByID mocks base method.
func (m *Mockorderer) OrderByID(ctx context.Context, id int64) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderByID", ctx, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByID indicates an expected call of OrderByID.
func (mr *MockordererMockRecorder) OrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*Mockorderer)(nil).OrderByID), ctx, id)
}

// UpdateOrder mocks base method.
func (m *Mockorderer) UpdateOrder(ctx context.Context, order *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockordererMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*Mockorderer)(nil).UpdateOrder), ctx, order)
}
